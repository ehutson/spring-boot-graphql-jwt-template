scalar DateTime

type Query {
    # User queries
    me: User
    user(id: ID!): User
    users(input: PaginationInput): UserConnection!



    # Role queries
    roles: [Role!]!

    # Session queries
    activeSessions: [Session!]!
}

type Mutation {
    # Authentication mutations
    register(input: RegisterInput!): UserRegistrationResponse!
    verifyEmailToken(token: String!): Boolean!
    login(input: LoginInput!): AuthPayload!
    refreshToken: AuthPayload!
    logout: Boolean!
    revokeAllSessions: Boolean!
    requestPasswordReset(email: String!): Boolean!
    resetPassword(input: ResetPasswordInput!): Boolean!

    # User mutations
    createUser(input: CreateUserInput!): User!
    updateUser(id: ID!, input: UpdateUserInput!): User!
    deleteUser(id: ID!): Boolean!

    # Role mutations
    createRole(input: CreateRoleInput!): Role!
    updateRole(id: ID!, input: UpdateRoleInput!): Role!
    deleteRole(id: ID!): Boolean!
    assignRoleToUser(userId: ID!, roleId: ID!): User!
    removeRoleFromUser(userId: ID!, roleId: ID!): User!
}

type User {
    id: ID!
    username: String!
    email: String!
    firstName: String!
    lastName: String!
    roles: [Role!]!
    activated: Boolean!
    langKey: String
    timezone: String
    activationKey: String
    activationDate: DateTime
    resetKey: String
    resetDate: DateTime
    createdBy: String!
    createdAt: DateTime!
    lastModifiedBy: String!
    lastModifiedAt: DateTime!
}

type Role {
    id: ID!
    name: String!
    description: String
    predefined: Boolean!
    createdBy: String!
    createdAt: DateTime!
    lastModifiedBy: String!
    lastModifiedAt: DateTime!
}

type Session {
    id: ID!
    userAgent: String!
    ipAddress: String!
    createdAt: DateTime!
    expirationDate: DateTime!
    lastUsed: DateTime
}

type UserRegistrationResponse {
    success: Boolean!
    message: String
    user: User
}

type AuthPayload {
    success: Boolean!
    message: String
    user: User
}

type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
    endCursor: String
}

type UserConnection {
    pageInfo: PageInfo!
    edges: [UserEdge!]!
    totalCount: Int!
}

type UserEdge {
    cursor: String!
    node: User!
}

input PaginationInput {
    first: Int
    last: Int
    before: String
    after: String
}

input RegisterInput {
    username: String!
    email: String!
    password: String!
    firstName: String!
    lastName: String!
    langKey: String
    timezone: String
}

input LoginInput {
    username: String!
    password: String!
}

input CreateUserInput {
    username: String!
    email: String!
    firstName: String!
    lastName: String!
    password: String!
    roles: [ID!]!
    langKey: String
    timezone: String
}

input UpdateUserInput {
    username: String
    email: String
    firstName: String
    lastName: String
    password: String
    langKey: String
    timezone: String
}

input CreateRoleInput {
    name: String!
    description: String!
}

input UpdateRoleInput {
    name: String
    description: String
}

input ResetPasswordInput {
    newPassword: String!
    token: String!
}